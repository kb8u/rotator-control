#!/usr/bin/perl -w
# Aim an M2 rotor using a GUI and map
# Written September 24, 2014 and copyright by Russell Dwarshuis, KB8U
# See the LICENSE files for terms of use.

# stuff to add or re-write:
# -map and serial port configuration
# -don't use eval in sub movepix
# -bind alt-1 through alt-9 to speed selection
# -bind alt-x to exit
# -use entry fields to change heading and speed. bind cr to execute new entry

use strict;
use feature 'unicode_strings';
use English;
use Tk;
require Tk::Dialog;
use Device::SerialPort qw( :STAT 0.07 );

our $TAU = 6.28318530718; # 2 x pi
our $sp;
# File holding serial port configuration information used by Device::SerialPort
my $COM_PORT_CONFIG_FILE = 'rotor.cfg';

# compass rose outer radius in pixels
my $RADIUS = 417;
# .gif's of different ranges from station location
my $EN71_745_GIF = './745.gif';
my $EN71_1371_GIF = './2117.gif';
my $EN71_2117_GIF = './2117.gif';
my $EN71_5815_GIF = './5815.gif';
my $EN71_11469_GIF = './11469.gif';

# send an opcode and get raw data back from rotor
# returns 1 on success, 0 otherwise
sub query_rotor {
  my ($command, $result_ref, $size) = @_;

  $sp -> write($command);

  my ($count_in, $string_in) = $sp->read($size);
  $$result_ref = $string_in;
  return 1 if $count_in == $size;

  $$result_ref = '';
  return 0
}


# update GUI
sub repeat_handler {
  my ($canv,$line_ref,$text_direction_ref,$text_speed_ref) = @_;

  my $result;
  my ($x,$y,$radians);
  query_rotor("\r",\$result,19);

  my ($a,undef,$limit_flag,$heading,undef,$speed,undef,$movement) = 
    unpack "A A2 A2 A5 A3 A A A2",$result;
  # check for invalid input
  unless ($a eq 'A') { return }
  unless (($limit_flag eq '=') || ($limit_flag eq '=-')) { return }
  $limit_flag = ($limit_flag eq '=') ? 0 : 1;

  # ignore junk lines (rotor sends it's own updates sometimes)
  unless ($heading =~ /\d{1,3}\.?\d?/) { return }
  unless (($speed>0) && ($speed <10)) { return }
  unless (($movement eq 'ST') || ($movement eq 'MV')) { return }
  $$text_direction_ref = int($heading) . "\N{DEGREE SIGN}";
  $heading -= 90; # adjust from rotors to Tk's idea of what angle represents
  $radians = $TAU*($heading/360); # cos, sin needs radians, not degrees
  $x = int ($RADIUS * cos $radians);
  $y = int ($RADIUS * sin $radians);
  $canv->delete($$line_ref);
  $$line_ref = $canv->createLine(0,0,$x,$y,-fill => 'green', -width => 3);
  $$text_speed_ref = $speed;
}


# draw a line through the coordinates passed to the compas rose
sub heading_line {
  my ($args) = @_;
  my $line_ref = $args->{line_ref};
  my $canvas = $args->{canvas};
  my $cx = $args->{cx};
  my $cy = $args->{cy};
  my $color = $args->{color};

  my $angle = atan2($cy,$cx);
  my $rx = $RADIUS * cos $angle;
  my $ry = $RADIUS * sin $angle;
  $canvas->delete($$line_ref);
  $$line_ref = $canvas->createLine(0,0,$rx,$ry,-fill => $color, -width => 3);
}


# called when button 1 is double clicked; aims the rotator at cursor position
# and draws a red line to compass rose
sub aim_it {
  my ($canv, $x, $y, $line_ref) = @_;
  my $cx = $canv->canvasx($x);
  my $cy = $canv->canvasy($y); # y-axis is upside down from conventional system
  my $deg = atan2($cy,$cx)*360/$TAU;
  # compass has 0 degrees at north, not east. 2nd quadrant needs +90+360,
  # others +90
  $deg = ($deg <-90) ? int ($deg+450) : int($deg + 90); 

  # place a red line at the selected heading
  my $args = { line_ref => $line_ref,
               canvas => $canv,
               cx => $cx,
               cy => $cy,
               color => 'red' };
  heading_line($args);
  $deg = int $deg;
  $sp->write("$deg\r");
}


# bound to mouse movement; draws a black line through mouse position to
# compass rose
sub prelim_aim {
  my ($canv, $x, $y, $line_ref) = @_;
  my $cx = $canv->canvasx($x);
  my $cy = $canv->canvasy($y); # y-axis is upside down from conventional system
  my $deg = atan2($cy,$cx)*360/$TAU;
  # compass has 0 degrees at north, not east. 2nd quadrant needs +90+360, others +90
  $deg = ($deg <-90) ? int ($deg+450) : int($deg + 90); 

  # place a black line at the selected heading
  my $args = { line_ref => $line_ref,
               canvas => $canv,
               cx => $cx,
               cy => $cy,
               color => 'black' };
  heading_line($args);
}


sub setup {
  my ($mw,$setup_canvas) = @_;

  if (! Exists($$setup_canvas)) {
    $$setup_canvas = $$mw->Toplevel
      (
       -height => 100,
       -width => 400,
       -title => 'rotator-control setup',
       -takefocus => 1,
      );
    $$setup_canvas->Button
      (
       -text => 'Close',
       -command => sub { $$setup_canvas->withdraw},
      )->pack;
  }
  else {
    $$setup_canvas->deiconify();
    $$setup_canvas->raise();
  }
}


sub exit_gracefully {
  undef $sp;
  exit;
}


# change the map
sub set_range {
  my ($canvas,$pix,$pix_id_ref) = @_;
  my $sw_canvas = $canvas->Subwidget("canvas");

  # get rid of the old picture first
  $canvas->delete($$pix_id_ref);
  $$pix_id_ref = $canvas->createImage(0,0, -image => $pix, -anchor => 'center');
  $sw_canvas->lower($$pix_id_ref,'all');
  $canvas->configure(-scrollregion => [$canvas->bbox("all") ]);
  # initialize the view to more-or-less the middle of the drawing
  $canvas->xview('moveto',0.11);
  $canvas->yview('moveto',0.24);
}


# changes the rotor speed.
sub set_speed {
  my ($speed) = @_;
  $sp->write("s$speed\r");  # rotor has bug where occassionally the command is
  $sp->write("s$speed\r");  # ignored.  workaround is to send the command
  $sp->write("s$speed\r");  # three times...
}


########################## main #########################
my $port = '/dev/ttyS1';
$sp = new Device::SerialPort($port) || die "Can't open $port: $^E\n";

$sp->databits(8);
$sp->baudrate(9600);
$sp->parity("none");
$sp->stopbits(1);
$sp->handshake("none");

$sp->write_settings || die "Couldn't configure serial port $port";

$sp->save($COM_PORT_CONFIG_FILE);

$sp->read_const_time(50);

my $mw = new MainWindow;
$mw->title("M\N{SUPERSCRIPT TWO} Rotor control");

my $canvas = $mw->Scrolled('Canvas', -height =>480, -width => 640,
                        -scrollbars => 'se');
$canvas->pack(-side => 'bottom', -anchor => 'center', -expand => 1,
              -fill => 'both');

# The three different ranges
my $PIX_1 = $canvas->Photo(-file => $EN71_745_GIF);
my $PIX_2 = $canvas->Photo(-file => $EN71_1371_GIF);
my $PIX_3 = $canvas->Photo(-file => $EN71_2117_GIF);
my $PIX_4 = $canvas->Photo(-file => $EN71_5815_GIF);
my $PIX_5 = $canvas->Photo(-file => $EN71_11469_GIF);

my $pix_id;

# draw a range to start with
set_range($canvas,$PIX_1,\$pix_id);

# set the scroll region to the proper size
$canvas->configure(-scrollregion => [$canvas->bbox("all") ]);

# initialize the view to more-or-less the middle of the drawing
$canvas->xview('moveto',0.11);
$canvas->yview('moveto',0.24);

# bind keys to move the map around
$mw->bind("<Key-Up>", [ sub { $canvas->yview('scroll',-1,'units' )} ] );
$mw->bind("<Key-Down>", [ sub { $canvas->yview('scroll',1,'units' )} ] );
$mw->bind("<Key-Left>", [ sub { $canvas->xview('scroll',-1,'units' )} ] );
$mw->bind("<Key-Right>", [ sub { $canvas->xview('scroll',1,'units' )} ] );
$mw->bind("<Key-Home>", [ sub { $canvas->xview('moveto',0)} ] );
$mw->bind("<Key-End>", [ sub { $canvas->xview('moveto',1)} ] );
$mw->bind("<Key-Prior>", [ sub { $canvas->yview('moveto',0)} ] );
$mw->bind("<Key-Next>", [ sub { $canvas->yview('moveto',1)} ] );

# have to bind to stuff in the canvas, not the canvas itself
my $sw_canvas = $canvas->Subwidget("canvas");
my ($desired_dir,$prelim_dir);
$sw_canvas->Tk::bind("<Double-Button-1>",
                     [ \&aim_it, Ev('x'), Ev('y'), \$desired_dir ]);
$sw_canvas->Tk::bind("<Motion>",
                    [ \&prelim_aim,  Ev('x'), Ev('y'), \$prelim_dir ]);
$sw_canvas->Tk::bind("<Leave>", [ sub { $canvas->delete($prelim_dir) }]);

# create frame for menus along the very top
my $top_menu_frame = $mw->Frame
  (

   -borderwidth => 2,
   -height => 18,
   -width => 500,
  );
$top_menu_frame->pack(-side=>'top', -fill => 'x');
$top_menu_frame->packPropagate(0);
# place file and range menus in top_menu_frame
my $file_menu = $top_menu_frame->Menubutton
  (
   -text => 'File',
   -tearoff => 0,
   -menuitems => [[ 'command' => "Exit", -command => \&exit_gracefully],]
  );
$file_menu->pack(-side =>'left');
my @range;
$range[0]=['command'=>"745miles",-command=>[\&set_range,$canvas,$PIX_1,\$pix_id]];
$range[1]=['command'=>"1371miles",-command=>[\&set_range,$canvas,$PIX_2,\$pix_id]];
$range[2]=['command'=>"2117miles",-command=>[\&set_range,$canvas,$PIX_3,\$pix_id]];
$range[3]=['command'=>"5815miles",-command=>[\&set_range,$canvas,$PIX_4,\$pix_id]];
$range[4]=['command'=>"11469miles",-command=>[\&set_range,$canvas,$PIX_5,\$pix_id]];
my $range_menu = $top_menu_frame->Menubutton
  (
   -text => 'Range',
   -tearoff => 0,
   -menuitems => \@range,
  );
$range_menu->pack(-side =>'left');

my @speed;
for(my $i=1; $i<10; $i++) {
  $speed[$i]=['command'=>$i,-command=>[\&set_speed,$i]];
}
my $speed_menu = $top_menu_frame->Menubutton
  (
   -text => 'Speed',
   -tearoff => 0,
   -menuitems => \@speed,
  );
$speed_menu->pack(-side =>'left');

my $setup_canvas = 0;
my $setup_button = $top_menu_frame->Button
  (
   -text => 'Setup',
   -relief => 'flat',
   -command => [\&setup,\$mw,\$setup_canvas]
  );
$setup_button->pack(-side => 'left');
# a frame for the current beam heading, moving indicator and stop button
my $info_frame = $mw->Frame
  (
   -borderwidth => 2,
   -height => 30,
   -width => 500,
  );
$info_frame->pack(-side=>'top', -fill => 'x');
$info_frame->packPropagate(0);
# a text entry field for current direction
my $text_direction;
my $direction_entry = $info_frame->Entry
  (
   -textvariable => \$text_direction,
   -width => 4,
   -font => "Arial 12 bold",
   -foreground => 'green',
   -background => 'black',
   -insertbackground => 'white',
   -takefocus => 0,
  );
# numeric indicator/input of beam heading
$direction_entry->pack(-side =>'left');
my $dir_descr_text = $info_frame->Label(-text=>'Heading')->pack(-side =>'left');

# a text entry field for current speed
my $text_speed;
my $speed_entry = $info_frame->Entry
  (
   -textvariable => \$text_speed,
   -width => 1,
   -font => "Arial 12 bold",
   -foreground => 'green',
   -background => 'black',
   -insertbackground => 'white',
   -takefocus => 0,
  );
# numeric indicator/input of beam heading
$speed_entry->pack(-side =>'left');
my $speed_descr_text = $info_frame->Label(-text=>'Speed')->pack(-side =>'left');

# button/indicator to stop beam movment/indicates movement
my $stop_Button = $info_frame->Button
  (
   -text => 'STOP',
   -command => [ sub { $sp->write("s\r") } ],
  );
$stop_Button->pack(-side => 'left');
$dir_descr_text = $info_frame->Label(-text=>'Movement')->pack(-side =>'left');

my $beam_pointer;
$mw->repeat(100,[\&repeat_handler,$canvas,\$beam_pointer,\$text_direction,\$text_speed]);

MainLoop;
